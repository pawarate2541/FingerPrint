import time
import board
import serial
from digitalio import DigitalInOut, Direction
import adafruit_fingerprint
import RPi.GPIO as GPIO
import lcddriver

led = DigitalInOut(board.D13)
led.direction = Direction.OUTPUT
lcd = lcddriver.lcd()
lcd.lcd_clear()

GPIO.setmode(GPIO.BCM)
GPIO.setup(21, GPIO.OUT)
GPIO.setup(27, GPIO.OUT)
GPIO.setup(18, GPIO.OUT)
GPIO.setup(22, GPIO.OUT)
GPIO.setup(23, GPIO.OUT)

uart = serial.Serial("/dev/ttyUSB0", baudrate=57600, timeout=1)

# If using with a computer such as Linux/RaspberryPi, Mac, Windows with USB/serial converter:
# import serial
# uart = serial.Serial("/dev/ttyUSB0", baudrate=57600, timeout=1)

# If using with Linux/Raspberry Pi and hardware UART:
# import serial
# uart = serial.Serial("/dev/ttyS0", baudrate=57600, timeout=1)

finger = adafruit_fingerprint.Adafruit_Fingerprint(uart)

##################################################


def get_fingerprint():
    """Get a finger print image, template it, and see if it matches!"""
    lcd.lcd_clear()
    lcd.lcd_display_string("Waiting for image...",1)
    while finger.get_image() != adafruit_fingerprint.OK:
        pass
    lcd.lcd_display_string("Templating...",2)
    if finger.image_2_tz(1) != adafruit_fingerprint.OK:
        return False
    lcd.lcd_display_string("Searching...",3)
    if finger.finger_fast_search() != adafruit_fingerprint.OK:
        return False
    return True


# pylint: disable=too-many-branches
def get_fingerprint_detail():
    """Get a finger print image, template it, and see if it matches!
    This time, print out each error instead of just returning on failure"""
    print("Getting image...", end="", flush=True)
    i = finger.get_image()
    if i == adafruit_fingerprint.OK:
        print("Image taken")
    else:
        if i == adafruit_fingerprint.NOFINGER:
            print("No finger detected")
        elif i == adafruit_fingerprint.IMAGEFAIL:
            print("Imaging error")
        else:
            print("Other error")
        return False

    print("Templating...", end="", flush=True)
    i = finger.image_2_tz(1)
    if i == adafruit_fingerprint.OK:
        print("Templated")
    else:
        if i == adafruit_fingerprint.IMAGEMESS:
            print("Image too messy")
        elif i == adafruit_fingerprint.FEATUREFAIL:
            print("Could not identify features")
        elif i == adafruit_fingerprint.INVALIDIMAGE:
            print("Image invalid")
        else:
            print("Other error")
        return False

    print("Searching...", end="", flush=True)
    i = finger.finger_fast_search()
    # pylint: disable=no-else-return
    # This block needs to be refactored when it can be tested.
    if i == adafruit_fingerprint.OK:
        print("Found fingerprint!")
        return True
    else:
        if i == adafruit_fingerprint.NOTFOUND:
            print("No match found")
        else:
            print("Other error")
        return False


# pylint: disable=too-many-statements
def enroll_finger(location):
    """Take a 2 finger images and template it, then store in 'location'"""
    for fingerimg in range(1, 3):
        if fingerimg == 1:
            lcd.lcd_clear()
            lcd.lcd_display_string("Place finger",1)
        else:
            lcd.lcd_clear()
            lcd.lcd_display_string("Place finger again",2)

        while True:
            i = finger.get_image()
            if i == adafruit_fingerprint.OK:
                print("Image taken")
                break
            if i == adafruit_fingerprint.NOFINGER:
                print(".", end="", flush=True)
            elif i == adafruit_fingerprint.IMAGEFAIL:
                print("Imaging error")
                return False
            else:
                print("Other error")
                return False

        print("Templating...", end="", flush=True)
        i = finger.image_2_tz(fingerimg)
        if i == adafruit_fingerprint.OK:
            print("Templated")
        else:
            if i == adafruit_fingerprint.IMAGEMESS:
                print("Image too messy")
            elif i == adafruit_fingerprint.FEATUREFAIL:
                print("Could not identify features")
            elif i == adafruit_fingerprint.INVALIDIMAGE:
                print("Image invalid")
            else:
                print("Other error")
            return False

        if fingerimg == 1:
            print("Remove finger")
            time.sleep(1)
            while i != adafruit_fingerprint.NOFINGER:
                i = finger.get_image()

    print("Creating model...", end="", flush=True)
    i = finger.create_model()
    if i == adafruit_fingerprint.OK:
        print("Created")
    else:
        if i == adafruit_fingerprint.ENROLLMISMATCH:
            print("Prints did not match")
        else:
            print("Other error")
        return False

    print("Storing model #%d..." % location, end="", flush=True)
    i = finger.store_model(location)
    if i == adafruit_fingerprint.OK:
        print("Stored")
    else:
        if i == adafruit_fingerprint.BADLOCATION:
            print("Bad storage location")
        elif i == adafruit_fingerprint.FLASHERR:
            print("Flash storage error")
        else:
            print("Other error")
        return False
    
#############locker is open######################
    if location == 1:
        lcd.lcd_clear()
        lcd.lcd_display_string("Locker number 1",2)
        lcd.lcd_display_string("   Finish   ",3)
        GPIO.output(21,GPIO.HIGH)
        time.sleep(5)
        GPIO.output(21,GPIO.LOW)
    elif location == 2:
        lcd.lcd_clear()
        lcd.lcd_display_string("Locker number 2",2)
        lcd.lcd_display_string("   Finish   ",3)
        GPIO.output(18,GPIO.HIGH)
        time.sleep(5)
        GPIO.output(18,GPIO.LOW)
    elif location == 3:
        lcd.lcd_clear()
        lcd.lcd_display_string("Locker number 3",2)
        lcd.lcd_display_string("   Finish   ",3)
        GPIO.output(27,GPIO.HIGH)
        time.sleep(5)
        GPIO.output(27,GPIO.LOW)
    elif location == 4:
        lcd.lcd_clear()
        lcd.lcd_display_string("Locker number 3",2)
        lcd.lcd_display_string("   Finish   ",3)
        GPIO.output(22,GPIO.HIGH)
        time.sleep(5)
        GPIO.output(22,GPIO.LOW)
    elif location == 5:
        lcd.lcd_clear()
        lcd.lcd_display_string("Locker number 3",2)
        lcd.lcd_display_string("   Finish   ",3)
        GPIO.output(23,GPIO.HIGH)
        time.sleep(5)
        GPIO.output(23,GPIO.LOW)

    return True


##################################################


def get_num():
    """Use input() to get a valid number from 1 to 127. Retry till success!"""
    i = 0
    while (i > 6) or (i < 1):
        try:
            lcd.lcd_clear()
            i = int(input(lcd.lcd_display_string("Select Number 1-6: ",1)))
            if i == 1:
                break
        except ValueError:
            pass
    return i


while True:
    #print("----------------")
    if finger.read_templates() != adafruit_fingerprint.OK:
        raise RuntimeError("Failed to read templates")
    lcd.lcd_clear()
    lcd.lcd_display_string("templates:",1)
    lcd.lcd_display_string("e) enroll print",2)
    lcd.lcd_display_string("f) find print",3)
    lcd.lcd_display_string("d) delete print",4)
    #lcd.lcd_clear()
    #print("----------------")
    c = input("> ")

    if c == "e":
        enroll_finger(get_num())
    if c == "f":
        if get_fingerprint():
            print("Detected #",finger.finger_id, "with confidence", finger.confidence)
            if  finger.finger_id == 1:
                lcd.lcd_clear()
                lcd.lcd_display_string("Locker number 1",2)
                lcd.lcd_display_string("   Finish   ",3)                    
                GPIO.output(21,GPIO.HIGH)
                time.sleep(5)
                GPIO.output(21,GPIO.LOW)
            elif  finger.finger_id ==2:
                lcd.lcd_clear()
                lcd.lcd_display_string("Locker number 2",2)
                lcd.lcd_display_string("   Finish   ",3)
                GPIO.output(18,GPIO.HIGH)
                time.sleep(5)
                GPIO.output(18,GPIO.LOW)
            elif location == 3:
                lcd.lcd_clear()
                lcd.lcd_display_string("Locker number 3",2)
                lcd.lcd_display_string("   Finish   ",3)
                GPIO.output(27,GPIO.HIGH)
                time.sleep(5)
                GPIO.output(27,GPIO.LOW)
            elif location == 4:
                lcd.lcd_clear()
                lcd.lcd_display_string("Locker number 4",2)
                lcd.lcd_display_string("   Finish   ",3)
                GPIO.output(22,GPIO.HIGH)
                time.sleep(5)
                GPIO.output(22,GPIO.LOW)
            elif location == 5:
                lcd.lcd_clear()
                lcd.lcd_display_string("Locker number 5",2)
                lcd.lcd_display_string("   Finish   ",3)
                GPIO.output(23,GPIO.HIGH)
                time.sleep(5)
                GPIO.output(23,GPIO.LOW)
             
        else:
            lcd.lcd_clear()
            lcd.lcd_display_string("Not found",3)
            
        if finger.delete_model(finger.finger_id) == adafruit_fingerprint.OK:
            lcd.lcd_clear()
            lcd.lcd_display_string("Deleted!",2)
        else:
            lcd.lcd_clear()
            lcd.lcd_display_string("Failed to delete",2)
    if c == "d":
        if finger.delete_model(get_num()) == adafruit_fingerprint.OK:
            print("Deleted!")
        else:
            print("Failed to delete")




